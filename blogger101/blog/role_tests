from django.test import TestCase
from unittest.mock import patch, MagicMock
from rest_framework.test import APIClient
from blog.models import Group, Role, User
from rest_framework import status
class RoleAPITEST(TestCase):
    def setUp(self):
        self.client = APIClient()
    
        self.user = User.objects.create_user(username="testuser", password="123456")
        self.group = Group.objects.create_group(groupname="Test Group", groupcode="test001"
                                                )
    @patch("blog.views.Role.objects")
    def test_create_role_success(self, mock_filter):
        mock_filter.return_value.exists.return_value = False

        data = {
                "user_id": self.user.id,
                "group_id": self.group.id

        }
        response = self.client.post("/api/role/", data,format ="json")

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertIn("message", response.data)
        self.assertIn("id", response.data)
        self.assertEqual(response.data["message"], "Role created")


        role_id = response.data["id"]
        role = Role.objects.get(id=role_id)
        self.assertIn("id", response.data)
        self.assertEqual(response.data["message"], "Role created")

    def test_role_missing_param(self, mocked):
        data = {
            "user_id": self.user.id
        }
        response = self.client.post("/api/role", data, format ="json")

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("error", response.data)


    def test_role_exists(self, mock_objects):
        mock_filter = MagicMock
        mock_filter.exists.return_value = True
        mock_objects.return_value = mock_filter

        data = {"user_id": self.user.id,"group_id": self.group.id}
        response = self.client.post("/api/role", data)

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("error", response.data)
        self.assertEqual(response.data["error"], "Role already exists")
        
